LeetCode : 451 : Sort Character by  Frequency

Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.

Return the sorted string. If there are multiple answers, return any of them.

 

Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.
 

Constraints:

1 <= s.length <= 5 * 105
s consists of uppercase and lowercase English letters and digits.


Sollution : 


class Solution {
    public String frequencySort(String s) {

    Map<Character , Integer > freqMap = new HashMap<>();

    for(char c : s.toCharArray()){
        freqMap.put( c , freqMap.getOrDefault( c , 0) + 1);
    }

     // Step 2: Bucket Sort - Create buckets for frequencies
     List<Character>[] buckets = new List[s.length() + 1];
     for(char c : freqMap.keySet()){
        int freq = freqMap.get(c);

        if(buckets[freq] == null){
            buckets[freq] = new ArrayList<>();
        }
        buckets[freq].add(c);
     }

     // // Step 3: Build the result string

     StringBuilder sb = new StringBuilder();
     for(int i=s.length(); i>0; i--){
        if(buckets[i] != null){
            for(char c : buckets[i]){
                  sb.append(String.valueOf(c).repeat(i));
            }
        }
     }
    return sb.toString();
    }
}
